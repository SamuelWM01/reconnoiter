name = "Websocket"
plan = 5

'use strict';
var tools = require('./testconfig'),
    nc = require('../../src/js/noit/index'),
    fs = require('fs'),
    async = require('async'),
    websocket = require('websocket'),
    noit, conn;


function put_check(uuid, cb) {
  conn.request({path: '/checks/set/' + uuid, method: 'PUT' },
    '<?xml version="1.0" encoding="utf8"?>' +
    '<check>' +
    '<attributes>' +
    '  <target>127.0.0.1</target>' +
    '  <period>1000</period>' +
    '  <timeout>500</timeout>' +
    '  <name>selfcheck</name>' +
    '  <filterset>allowall</filterset>' +
    '  <module>selfcheck</module>' +
    '</attributes>' +
    '<config/>' +
    '</check>',
    cb);
}

test = function() {
  var test = this;
  noit = new tools.noit(test, "113",
    { 'noit_ssl_on': 'on',
      'logs_debug': { '': 'false' },
      'rest_acls': [ { 'type': 'deny',
                       'rules': [
                         { 'type': 'allow', 'url': '^/livestream/' },
                         { 'type': 'allow', 'url': '^/checks/set/' },
                       ] }
                   ] });

  conn = noit.get_connection();
  noit.start(function(pid,port) {
      test.is(port, noit.get_api_port(), 'API port matches');
      async.series([
          function(callback) {
              put_check('f7cea020-f19d-11dd-85a6-cb6d3a2207dc', function(code, data) {
                  test.is(code, 200, 'put check');
                  callback();
              });
          },
          function(done) { noit.wait_for_log(/`selfcheck <-/, 2000, function() {done();}) },
          function(callback) {
              /* we have to turn off unauth'd rejection because we are using a self-signed cert */
              var client = new websocket.client({"tlsOptions": {"rejectUnauthorized" : false}});
              client.on('connectFailed', function( error ) {
                  test.is(false, true, 'failed to connect');
                  callback();
              });

              client.on('connect', function(connection) {
                  connection.on('error', function(error) {
                      console.log("Connection error: " + error);
                      test.is(false, true, 'connection error');
                      callback();
                  });
                  connection.on('message', function(message) {
                      var metric = JSON.parse(message.utf8Data);
                      test.is(metric.type, 'M', 'receive metric message');
                      connection.drop(connection.CLOSE_REASON_GOING_AWAY, "test finished");
                      callback();
                  });

                  function register() {
                      if (connection.connected) {
                          var check = {
                              "period_ms": 500,
                              "check_uuid": "f7cea020-f19d-11dd-85a6-cb6d3a2207dc",
                              "metrics" : ["check_cnt", "checks_run"]
                          };
                          var string = JSON.stringify(check);
                          connection.sendUTF(string);
                      }
                  }
                  register();
              });

              client.connect('wss://127.0.0.1:' + port + '/livestream/', 'noit_livestream');
          },
          function(callback) { noit.stop(); callback(); }
      ]);
  });
}
